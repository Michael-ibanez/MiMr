{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n/**\n * Assign a value to a nested object\n * @function putNestedValue\n * @param params the parent object - this argument will be modified!\n * @param key key in the form nested[innerkey]\n * @param value the value to assign\n * @return the modified params object\n */\n\n\nvar url = require('url');\n\nvar extend = require(\"lodash/extend\");\n\nvar isObject = require(\"lodash/isObject\");\n\nvar isString = require(\"lodash/isString\");\n\nvar isUndefined = require(\"lodash/isUndefined\");\n\nvar entries = require('./utils/entries');\n\nvar cloudinary_config = void 0;\n/**\n * Sets a value in an object using a nested key\n * @param {object} params The object to assign the value in.\n * @param {string} key The key of the value. A period is used to denote inner keys.\n * @param {*} value The value to set.\n * @returns {object} The params argument.\n * @example\n *     let o = {foo: {bar: 1}};\n *     putNestedValue(o, 'foo.bar', 2); // {foo: {bar: 2}}\n *     putNestedValue(o, 'foo.inner.key', 'this creates an inner object');\n *     // {{foo: {bar: 2}, inner: {key: 'this creates an inner object'}}}\n */\n\nfunction putNestedValue(params, key, value) {\n  var chain = key.split(/[\\[\\]]+/).filter(function (i) {\n    return i.length;\n  });\n  var outer = params;\n  var lastKey = chain.pop();\n\n  for (var j = 0; j < chain.length; j++) {\n    var innerKey = chain[j];\n    var inner = outer[innerKey];\n\n    if (inner == null) {\n      inner = {};\n      outer[innerKey] = inner;\n    }\n\n    outer = inner;\n  }\n\n  outer[lastKey] = value;\n  return params;\n}\n\nmodule.exports = function (new_config, new_value) {\n  if (cloudinary_config == null || new_config === true) {\n    if (cloudinary_config == null) {\n      cloudinary_config = {};\n    } else {\n      Object.keys(cloudinary_config).forEach(function (key) {\n        return delete cloudinary_config[key];\n      });\n    }\n\n    var cloudinary_url = process.env.CLOUDINARY_URL;\n\n    if (cloudinary_url != null) {\n      var uri = url.parse(cloudinary_url, true);\n      var parsedConfig = {\n        cloud_name: uri.host,\n        api_key: uri.auth && uri.auth.split(\":\")[0],\n        api_secret: uri.auth && uri.auth.split(\":\")[1],\n        private_cdn: uri.pathname != null,\n        secure_distribution: uri.pathname && uri.pathname.substring(1)\n      };\n      entries(parsedConfig).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            key = _ref2[0],\n            value = _ref2[1];\n\n        if (value !== undefined) {\n          cloudinary_config[key] = value;\n        }\n      });\n\n      if (uri.query != null) {\n        entries(uri.query).forEach(function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 2),\n              key = _ref4[0],\n              value = _ref4[1];\n\n          return putNestedValue(cloudinary_config, key, value);\n        });\n      }\n    }\n  }\n\n  if (!isUndefined(new_value)) {\n    cloudinary_config[new_config] = new_value;\n  } else if (isString(new_config)) {\n    return cloudinary_config[new_config];\n  } else if (isObject(new_config)) {\n    extend(cloudinary_config, new_config);\n  }\n\n  return cloudinary_config;\n};","map":null,"metadata":{},"sourceType":"script"}