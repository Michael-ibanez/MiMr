{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\"; // Register User\n\nexport const registerUser = (userData, history) => dispatch => {\n  console.log(userData.profilePic);\n  axios.post(\"/api/users/register\", userData).then(res => history.push(\"/\")).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Login - get user token\n\nexport const loginUser = userData => dispatch => {\n  axios.post(\"/api/users/login\", userData).then(res => {\n    // Save to localStorage\n    // Set token to localStorage\n    const token = res.data.token;\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // Set current user\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["/Users/michaelibanez/MiMr/client/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","registerUser","userData","history","dispatch","console","log","profilePic","post","then","res","push","catch","err","type","payload","response","data","loginUser","token","localStorage","setItem","decoded","setCurrentUser","setUserLoading","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SAASC,UAAT,EAAqBC,gBAArB,EAAuCC,YAAvC,QAA2D,SAA3D,C,CAEA;;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuBC,QAAQ,IAAI;AAC7DC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAQ,CAACK,UAArB;AACAZ,EAAAA,KAAK,CACFa,IADH,CACQ,qBADR,EAC+BN,QAD/B,EAEGO,IAFH,CAEQC,GAAG,IAAIP,OAAO,CAACQ,IAAR,CAAa,GAAb,CAFf,EAGGC,KAHH,CAGSC,GAAG,IACRT,QAAQ,CAAC;AACPU,IAAAA,IAAI,EAAEhB,UADC;AAEPiB,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,GAAD,CAJZ;AASD,CAXM,C,CAaP;;AACA,OAAO,MAAMC,SAAS,GAAGhB,QAAQ,IAAIE,QAAQ,IAAI;AAC/CT,EAAAA,KAAK,CACFa,IADH,CACQ,kBADR,EAC4BN,QAD5B,EAEGO,IAFH,CAEQC,GAAG,IAAI;AACX;AAEA;AAHW,UAIHS,KAJG,GAIOT,GAAG,CAACO,IAJX,CAIHE,KAJG;AAKXC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EALW,CAMX;;AACAvB,IAAAA,YAAY,CAACuB,KAAD,CAAZ,CAPW,CAQX;;AACA,UAAMG,OAAO,GAAGzB,UAAU,CAACsB,KAAD,CAA1B,CATW,CAUX;;AACAf,IAAAA,QAAQ,CAACmB,cAAc,CAACD,OAAD,CAAf,CAAR;AACD,GAdH,EAeGV,KAfH,CAeSC,GAAG,IACRT,QAAQ,CAAC;AACPU,IAAAA,IAAI,EAAEhB,UADC;AAEPiB,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,GAAD,CAhBZ;AAqBD,CAtBM,C,CAwBP;;AACA,OAAO,MAAMM,cAAc,GAAGD,OAAO,IAAI;AACvC,SAAO;AACLR,IAAAA,IAAI,EAAEf,gBADD;AAELgB,IAAAA,OAAO,EAAEO;AAFJ,GAAP;AAID,CALM,C,CAOP;;AACA,OAAO,MAAME,cAAc,GAAG,MAAM;AAClC,SAAO;AACLV,IAAAA,IAAI,EAAEd;AADD,GAAP;AAGD,CAJM,C,CAMP;;AACA,OAAO,MAAMyB,UAAU,GAAG,MAAMrB,QAAQ,IAAI;AAC1C;AACAgB,EAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB,EAF0C,CAG1C;;AACA9B,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ0C,CAK1C;;AACAQ,EAAAA,QAAQ,CAACmB,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,CAPM","sourcesContent":["import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\n\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\";\n\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n  console.log(userData.profilePic);\n  axios\n    .post(\"/api/users/register\", userData)\n    .then(res => history.push(\"/\"))\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n  axios\n    .post(\"/api/users/login\", userData)\n    .then(res => {\n      // Save to localStorage\n\n      // Set token to localStorage\n      const { token } = res.data;\n      localStorage.setItem(\"jwtToken\", token);\n      // Set token to Auth header\n      setAuthToken(token);\n      // Decode token to get user data\n      const decoded = jwt_decode(token);\n      // Set current user\n      dispatch(setCurrentUser(decoded));\n    })\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n\n// User loading\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\n\n// Log user out\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n};\n"]},"metadata":{},"sourceType":"module"}