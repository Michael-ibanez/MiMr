{"ast":null,"code":"var _slicedToArray = require(\"/Users/michaelibanez/MiMr/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\n/**\n * Helper function. Gets or populates srcset breakpoints using provided parameters\n * Either the breakpoints or min_width, max_width, max_images must be provided.\n *\n * @module utils\n * @private\n * @param {srcset} srcset Options with either `breakpoints` or `min_width`, `max_width`, and `max_images`\n *\n * @return {number[]} Array of breakpoints\n *\n */\nfunction generateBreakpoints(srcset) {\n  let breakpoints = srcset.breakpoints || [];\n\n  if (breakpoints.length) {\n    return breakpoints;\n  }\n\n  let _map = [srcset.min_width, srcset.max_width, srcset.max_images].map(Number),\n      _map2 = _slicedToArray(_map, 3),\n      min_width = _map2[0],\n      max_width = _map2[1],\n      max_images = _map2[2];\n\n  if ([min_width, max_width, max_images].some(Number.isNaN)) {\n    throw 'Either (min_width, max_width, max_images) ' + 'or breakpoints must be provided to the image srcset attribute';\n  }\n\n  if (min_width > max_width) {\n    throw 'min_width must be less than max_width';\n  }\n\n  if (max_images <= 0) {\n    throw 'max_images must be a positive integer';\n  } else if (max_images === 1) {\n    min_width = max_width;\n  }\n\n  let stepSize = Math.ceil((max_width - min_width) / Math.max(max_images - 1, 1));\n\n  for (let current = min_width; current < max_width; current += stepSize) {\n    breakpoints.push(current);\n  }\n\n  breakpoints.push(max_width);\n  return breakpoints;\n}\n\nmodule.exports = generateBreakpoints;","map":null,"metadata":{},"sourceType":"script"}