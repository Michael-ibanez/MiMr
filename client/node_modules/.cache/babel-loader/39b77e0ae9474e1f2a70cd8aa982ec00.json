{"ast":null,"code":"/**\n * Authorization Token\n * @module auth_token\n */\nconst crypto = require('crypto');\n\nfunction digest(message, key) {\n  return crypto.createHmac(\"sha256\", Buffer.from(key, \"hex\")).update(message).digest('hex');\n}\n/**\n * Escape url using lowercase hex code\n * @param {string} url a url string\n * @return {string} escaped url\n */\n\n\nfunction escapeToLower(url) {\n  return encodeURIComponent(url).replace(/%../g, function (match) {\n    return match.toLowerCase();\n  });\n}\n/**\n * Auth token options\n * @typedef {object} authTokenOptions\n * @property {string} [token_name=\"__cld_token__\"] The name of the token.\n * @property {string} key The secret key required to sign the token.\n * @property {string} ip The IP address of the client.\n * @property {number} start_time=now The start time of the token in seconds from epoch.\n * @property {string} expiration The expiration time of the token in seconds from epoch.\n * @property {string} duration The duration of the token (from start_time).\n * @property {string} acl The ACL for the token.\n * @property {string} url The URL to authentication in case of a URL token.\n *\n */\n\n/**\n * Generate an authorization token\n * @param {authTokenOptions} options\n * @returns {string} the authorization token\n */\n\n\nmodule.exports = function (options) {\n  const tokenName = options.token_name ? options.token_name : \"__cld_token__\";\n\n  if (options.expiration == null) {\n    if (options.duration != null) {\n      let start = options.start_time != null ? options.start_time : Math.round(Date.now() / 1000);\n      options.expiration = start + options.duration;\n    } else {\n      throw new Error(\"Must provide either expiration or duration\");\n    }\n  }\n\n  let tokenParts = [];\n\n  if (options.ip != null) {\n    tokenParts.push(\"ip=\".concat(options.ip));\n  }\n\n  if (options.start_time != null) {\n    tokenParts.push(\"st=\".concat(options.start_time));\n  }\n\n  tokenParts.push(\"exp=\".concat(options.expiration));\n\n  if (options.acl != null) {\n    tokenParts.push(\"acl=\".concat(escapeToLower(options.acl)));\n  }\n\n  let toSign = [...tokenParts];\n\n  if (options.url) {\n    let url = escapeToLower(options.url);\n    toSign.push(\"url=\".concat(url));\n  }\n\n  let auth = digest(toSign.join(\"~\"), options.key);\n  tokenParts.push(\"hmac=\".concat(auth));\n  return \"\".concat(tokenName, \"=\").concat(tokenParts.join('~'));\n};","map":null,"metadata":{},"sourceType":"script"}